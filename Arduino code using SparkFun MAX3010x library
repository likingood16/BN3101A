// MAX30102/MAX30105 PPG over I2C at ~100 Hz, print "<IR>,0"
// Requires SparkFun MAX3010x library.
"""
Wiring:
MAX30102 VCC → 3.3V (check your board/module; many breakout boards are 3.3V)
GND → GND
SDA → Arduino SDA (A4 on classic Uno/Nano; dedicated SDA on newer boards)
SCL → Arduino SCL (A5 on classic Uno/Nano; dedicated SCL on newer boards)
Add 4.7 kΩ pull-ups to 3.3V on SDA/SCL if your breakout doesn’t include them.

Library (install first):
Arduino Library Manager → SparkFun MAX3010x Pulse and Proximity Sensor Library (SparkFun_MAX3010x)

"""

#include <Wire.h>
#include <SparkFun_MAX3010x.h>

MAX30105 particleSensor;

const uint32_t STREAM_HZ = 100;
const uint32_t STREAM_PERIOD_US = 1000000UL / STREAM_HZ;

unsigned long nextPrintUs;
long lastIR = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial) { /* for native USB boards */ }

  Wire.begin();
  Wire.setClock(400000); // Fast I2C

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("MAX3010x not found. Check wiring/power.");
    while (1) { delay(10); }
  }

  // Configure sensor:
  // sampleAverage, ledMode, sampleRate, pulseWidth, adcRange
  // ledMode: 1=Red, 2=IR, 3=Red+IR (we’ll use IR)
  byte ledMode = 2;
  particleSensor.setup(
    4,         // sampleAverage (4)
    ledMode,   // LED mode (IR only)
    100,       // sampleRate (Hz)
    411,       // pulseWidth (us) (69,118,215,411) → bandwidth tradeoff
    16384      // adcRange (2048,4096,8192,16384)
  );

  // LED amplitudes (0x00..0xFF); tune for your sensor/skin tone
  particleSensor.setPulseAmplitudeIR(0x1F);   // IR LED
  particleSensor.setPulseAmplitudeRed(0x00);  // Not used
  particleSensor.setPulseAmplitudeGreen(0x00);

  // Start FIFO fresh
  particleSensor.clearFIFO();

  nextPrintUs = micros();
}

void loop() {
  // Pull new samples from FIFO into library’s buffer
  if (particleSensor.check() > 0) {
    // Drain available samples; keep the latest IR value
    while (particleSensor.available()) {
      lastIR = particleSensor.getIR(); // 18-bit value (0..~100k+), not ADC raw
      particleSensor.nextSample();     // advance internal FIFO pointer
    }
  }

  // Output exactly at STREAM_HZ; print last known IR value, otherwise repeat
  unsigned long now = micros();
  if ((long)(now - nextPrintUs) >= 0) {
    // Emit "<PPG>,0" to match Python's expected two columns
    Serial.print(lastIR);
    Serial.print(',');
    Serial.println(0);

    nextPrintUs += STREAM_PERIOD_US;
  }
}
