/*
   Prototype for pEEG (FFT Density Spectrum) + PPG Waveform Simulation
   - Reads sample EEG and PPG data from arrays
   - Performs FFT on pEEG using ArduinoFFT library
   - Plots PPG as real-time waveform in Serial Plotter
*/

#include <arduinoFFT.h>

#define SAMPLES 128        // FFT requires power of 2 samples
#define SAMPLING_FREQUENCY 256 // Example EEG sampling rate (Hz)

arduinoFFT FFT = arduinoFFT();

// ===== Simulated Sample Data Arrays =====
// Replace these values with dataset from Excel/CSV/Internet
double eegSignal[SAMPLES] = {
  12, 15, 11, 9, 8, 10, 15, 20, 18, 14, 12, 11, 13, 14, 16, 15,
  12, 10, 8, 9, 11, 14, 19, 21, 18, 16, 12, 10, 9, 8, 15, 19,
  // ... (fill up to 128 samples with EEG-like waveform)
};

double ppgSignal[] = {
  500, 520, 540, 560, 580, 600, 580, 560, 540, 520, 500, 480,
  460, 450, 460, 480, 500,
  // Repeat or extend with actual PPG data samples
};

double vReal[SAMPLES];
double vImag[SAMPLES];

// ===== Setup =====
void setup() {
  Serial.begin(115200);
  Serial.println("Starting pEEG & PPG Prototype...");
}

// ===== Main Loop =====
void loop() {
  performEEG_FFT();
  plotPPG_Waveform();
}

// ===============================================
// 1. EEG → FFT → Density Spectrum
// ===============================================
void performEEG_FFT() {
  for (int i = 0; i < SAMPLES; i++) {
    vReal[i] = eegSignal[i];
    vImag[i] = 0;
  }

  FFT.Windowing(vReal, SAMPLES, FFT_WIN_HAMMING, FFT_FORWARD);
  FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
  FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);

  Serial.println("Frequency(Hz), Power");
  for (int i = 0; i < (SAMPLES / 2); i++) {
    double frequency = (i * 1.0 * SAMPLING_FREQUENCY) / SAMPLES;
    Serial.print(frequency);
    Serial.print(",");
    Serial.println(vReal[i]);   // Power of each frequency bin
  }

  delay(1000);
}

// ===============================================
// 2. PPG Waveform Plotting (Simulated Real-Time)
// ===============================================
void plotPPG_Waveform() {
  Serial.println("PPG_Waveform");
  for (int i = 0; i < sizeof(ppgSignal) / sizeof(ppgSignal[0]); i++) {
    Serial.print("PPG,");
    Serial.println(ppgSignal[i]);
    delay(20); // 20ms → ~50 Hz output rate
  }
}
